datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Situacao {
  ATIVO
  INATIVO
  PENDENTE
}

enum tiposReposta {
  TEXT
  RADIO
  CHECKBOX
}

enum Status {
  A // Ausente
  L // Leve
  M // Moderada
  G // Grave
}

enum Edema {
  E0 // Sem edema
  E1 // Recuperação imediata
  E2 // Alguns segundos para recuperar
  E3 // 10 a 12 segundos para recuperar
  E4 // >20 segundos para recuperar
}

enum LocalEdema {
  Tornozelo // Só tornozelo
  Joelho // Até o joelho
  Coxa // Até a raiz da coxa
  Anasarca // Anasarca
}

enum tiposTriagem {
  NRS2002
  MNA
}

enum PPStatus {
  M // Moderada
  G // Grave
}

enum ladoBraco {
  E // ESQUERDDO 
  D // DIREITO
}

enum antoprometriaClassificacao {
  A // Adequado
  R // Risco
  D // Desnutrido
}

enum pesoTipo {
  Atual
  Estimado
  Seco
}

enum caloriaMetodo {
  FDB
  Outro
}

enum proteinaMetodo {
  Pratico
  VCT
}

model Usuario {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  foto          String?  @db.Text
  nome          String   @db.VarChar(255)
  cpf_cnh       String   @unique @db.VarChar(11)
  email         String   @unique @db.VarChar(254)
  senha         String   @db.VarChar(60)
  situacao      Situacao @default(ATIVO)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_cargo BigInt? @db.BigInt
  cargo    Cargo?  @relation(fields: [id_cargo], references: [id])

  idosos              Idoso[]
  prontuarios         Prontuario[]
  relatorios_pia      RelatorioPia[]
  fichas_nutricionais FichaNutricional[]
  perroca             Perroca[]
  escala_braden       EscalaBraden[]

  @@map("usuario")
}

model Idoso {
  id                        BigInt   @id @default(autoincrement()) @db.BigInt
  uid                       String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  foto                      String?  @db.Text
  nome_completo             String   @db.VarChar(255)
  apelido                   String?  @db.VarChar(255)
  genero                    String?  @db.VarChar(255)
  data_nascimento           DateTime @db.Date()
  naturalidade              String   @db.VarChar(255)
  estado                    String   @db.VarChar(2)
  cidade                    String   @db.VarChar(255)
  estado_civil              String   @db.VarChar(255)
  religiao                  String   @db.VarChar(255)
  escolaridade              String   @db.VarChar(255)
  nome_pai                  String   @db.VarChar(255)
  nome_mae                  String   @db.VarChar(255)
  data_ingresso             DateTime @db.Date()
  cpf                       String?  @db.VarChar(11)
  cnh                       String?  @db.VarChar(11)
  rg                        String?  @db.VarChar(255)
  rg_orgao_expedidor        String?  @db.VarChar(255)
  cartao_sus                String?  @db.VarChar(255)
  titulo_eleitor            String?  @db.VarChar(12)
  titulo_eleitor_secao      String?  @db.VarChar(4)
  titulo_eleitor_zona       String?  @db.VarChar(3)
  certidao_nascimento_folha String?  @db.VarChar(255)
  certidao_nascimento_livro String?  @db.VarChar(255)
  certidao_casamento_folha  String?  @db.VarChar(255)
  certidao_casamento_livro  String?  @db.VarChar(255)
  situacao                  Situacao @default(ATIVO)
  motivo_inativacao         String?  @db.VarChar()
  criado_em                 DateTime @default(now()) @db.Timestamp()
  atualizado_em             DateTime @updatedAt @db.Timestamp()

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  responsavel_idoso ResponsavelIdoso[]
  prontuario        Prontuario[]
  relatorio_pia     RelatorioPia[]
  ficha_nutricional FichaNutricional[]
  perroca           Perroca[]
  escala_braden     EscalaBraden[]

  @@map("idoso")
}

model ResponsavelIdoso {
  id              BigInt   @id @default(autoincrement()) @db.BigInt
  uid             String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentesco      String   @db.VarChar(50)
  nome_completo   String   @db.VarChar(255)
  logradouro      String   @db.VarChar(100)
  endereco_numero String   @db.VarChar(20)
  bairro          String   @db.VarChar(50)
  cep             String   @db.VarChar(50)
  estado          String   @db.VarChar(2)
  cidade          String   @db.VarChar(50)
  telefone_1      String   @db.VarChar(20)
  telefone_2      String?  @db.VarChar(20)
  criado_em       DateTime @default(now()) @db.Timestamp()
  atualizado_em   DateTime @updatedAt @db.Timestamp()

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  @@map("responsavel_idoso")
}

model Cargo {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String   @db.VarChar(255)
  situacao      Situacao @default(ATIVO)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  usuario         Usuario[]
  cargo_permissao CargoPermissao[]

  @@map("cargo")
}

model CargoPermissao {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ativo         Boolean  @default(true)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_cargo BigInt @db.BigInt
  cargo    Cargo  @relation(fields: [id_cargo], references: [id])

  id_permissao BigInt    @db.BigInt
  permissao    Permissao @relation(fields: [id_permissao], references: [id])

  @@map("cargo_permissao")
}

model Permissao {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String   @db.VarChar(255)
  codigo        Int      @db.Integer()
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_grupo_permissao BigInt         @db.BigInt
  grupo_permissao    GrupoPermissao @relation(fields: [id_grupo_permissao], references: [id])

  cargo_permissao CargoPermissao[]

  @@map("permissao")
}

model GrupoPermissao {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String   @db.VarChar(255)
  codigo        Int      @db.Integer()
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  permissao Permissao[]

  @@map("grupo_permissao")
}

model Prontuario {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  relatorio     String   @db.Text
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  @@map("prontuario")
}

model ModeloRelatorioPia {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String   @db.VarChar(255)
  versao        Int      @default(1) @db.Integer()
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  modelo_relatorio_pia_pergunta ModeloRelatorioPiaPergunta[]
  relatorio_pia                 RelatorioPia[]

  @@map("modelo_relatorio_pia")
}

model ModeloRelatorioPiaPergunta {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pergunta      String   @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_modelo_relatorio_pia BigInt             @db.BigInt
  modelo_relatorio_pia    ModeloRelatorioPia @relation(fields: [id_modelo_relatorio_pia], references: [id])

  modelo_relatorio_pia_resposta ModeloRelatorioPiaResposta[]

  @@map("modelo_relatorio_pia_pergunta")
}

model ModeloRelatorioPiaResposta {
  id            BigInt       @id @default(autoincrement()) @db.BigInt
  uid           String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titulo        String       @db.VarChar(255)
  tipo          tiposReposta
  criado_em     DateTime     @default(now()) @db.Timestamp
  atualizado_em DateTime     @updatedAt @db.Timestamp

  id_modelo_relatorio_pia_pergunta BigInt                     @db.BigInt
  modelo_relatorio_pia_pergunta    ModeloRelatorioPiaPergunta @relation(fields: [id_modelo_relatorio_pia_pergunta], references: [id])

  modelo_relatorio_pia_resposta_opcao ModeloRelatorioPiaRespostaOpcao[]

  @@map("modelo_relatorio_pia_resposta")
}

model ModeloRelatorioPiaRespostaOpcao {
  uid           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opcao         String   @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_modelo_relatorio_pia_resposta BigInt                     @db.BigInt
  modelo_relatorio_pia_resposta    ModeloRelatorioPiaResposta @relation(fields: [id_modelo_relatorio_pia_resposta], references: [id])

  @@map("modelo_relatorio_pia_resposta_opcao")
}

model RelatorioPia {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String   @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_modelo_relatorio_pia BigInt             @db.BigInt
  modelo_relatorio_pia    ModeloRelatorioPia @relation(fields: [id_modelo_relatorio_pia], references: [id])

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  relatorio_pia_pergunta RelatorioPiaPergunta[]

  @@map("relatorio_pia")
}

model RelatorioPiaPergunta {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pergunta      String   @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_relatorio_pia BigInt       @db.BigInt
  relatorio_pia    RelatorioPia @relation(fields: [id_relatorio_pia], references: [id])

  relatorio_pia_resposta RelatorioPiaResposta[]

  @@map("relatorio_pia_pergunta")
}

model RelatorioPiaResposta {
  id            BigInt       @id @default(autoincrement()) @db.BigInt
  uid           String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titulo        String       @db.VarChar(255)
  tipo          tiposReposta
  criado_em     DateTime     @default(now()) @db.Timestamp
  atualizado_em DateTime     @updatedAt @db.Timestamp

  id_relatorio_pia_pergunta BigInt               @unique @db.BigInt
  relatorio_pia_pergunta    RelatorioPiaPergunta @relation(fields: [id_relatorio_pia_pergunta], references: [id])

  relatorio_pia_resposta_opcao RelatorioPiaRespostaOpcao[]

  @@map("relatorio_pia_resposta")
}

model RelatorioPiaRespostaOpcao {
  uid           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opcao         String   @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_relatorio_pia_resposta BigInt               @db.BigInt
  relatorio_pia_resposta    RelatorioPiaResposta @relation(fields: [id_relatorio_pia_resposta], references: [id])

  relatorio_pia_resposta_definida RelatorioPiaRespostaDefinida?

  @@map("relatorio_pia_resposta_opcao")
}

model RelatorioPiaRespostaDefinida {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  valor         String?  @db.VarChar(255)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  uid_relatorio_pia_resposta_opcao String                    @unique @db.Uuid
  relatorio_pia_resposta_opcao     RelatorioPiaRespostaOpcao @relation(fields: [uid_relatorio_pia_resposta_opcao], references: [uid])

  @@map("relatorio_pia_resposta_definida")
}

model FichaNutricional {
  id                       BigInt   @id @default(autoincrement()) @db.BigInt
  uid                      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  especificacao            String   @db.VarChar(300)
  alergia_intolerancia     Boolean  @db.Boolean
  alergia_intolerancia_obs String?  @db.VarChar(100)
  observacao               String?  @db.VarChar(300)
  criado_em                DateTime @default(now()) @db.Timestamp
  atualizado_em            DateTime @updatedAt @db.Timestamp

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  antropometria_nutricional AntropometriaNutricional?
  conduta_nutricional       CondutaNutricional[]
  quadro_clinico            QuadroClinico[]
  necessidade_nutricional   NecessidadeNutricional[]
  semiologia_nutricional    SemiologiaNutricional?

  @@map("ficha_nutricional")
}

model SemiologiaNutricional {
  id                 BigInt     @id @default(autoincrement()) @db.BigInt
  uid                String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  perda_aparente     String     @db.VarChar(100)
  gordura_subcutanea Status
  edema              Edema
  local_edema        LocalEdema
  ascite             Status
  criado_em          DateTime   @default(now()) @db.Timestamp
  atualizado_em      DateTime   @updatedAt @db.Timestamp

  id_ficha_nutricional BigInt           @unique @db.BigInt
  ficha_nutricional    FichaNutricional @relation(fields: [id_ficha_nutricional], references: [id])

  @@map("semiologia_nutricional")
}

model AntropometriaNutricional {
  id                             BigInt                     @id @default(autoincrement()) @db.BigInt
  uid                            String                     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  triagem                        tiposTriagem
  triagem_obs                    String                     @db.VarChar(100)
  escore                         String                     @db.VarChar(20)
  triagem_classificacao          String                     @db.VarChar(200)
  perda_peso                     String                     @db.VarChar(200)
  peso_atual                     String                     @db.VarChar(10)
  peso_estimado                  String                     @db.VarChar(10)
  peso_seco                      String                     @db.VarChar(10)
  pp_kg                          String                     @db.VarChar(10)
  pp                             String                     @db.VarChar(10)
  pp_tempo                       String                     @db.VarChar(10)
  pp_classificacao               PPStatus
  altura_atual                   String                     @db.VarChar(10)
  altura_estimada                String                     @db.VarChar(10)
  altura_aj                      String                     @db.VarChar(10)
  imc                            String                     @db.VarChar(10)
  imc_classificacao              String                     @db.VarChar(50)
  circ_braco                     String                     @db.VarChar(10)
  braco_lado                     ladoBraco
  circ_braco_percentil           String                     @db.VarChar(10)
  circ_braco_classificacao       antoprometriaClassificacao
  circ_panturrilha               String                     @db.VarChar(10)
  circ_panturrilha_percentil     String                     @db.VarChar(10)
  circ_panturrilha_classificacao antoprometriaClassificacao
  circ_abdominal                 String                     @db.VarChar(10)
  criado_em                      DateTime                   @default(now()) @db.Timestamp
  atualizado_em                  DateTime                   @updatedAt @db.Timestamp

  id_ficha_nutricional BigInt           @unique @db.BigInt
  ficha_nutricional    FichaNutricional @relation(fields: [id_ficha_nutricional], references: [id])

  @@map("antropometria_nutricional")
}

model NecessidadeNutricional {
  id                 BigInt         @id @default(autoincrement()) @db.BigInt
  uid                String         @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  peso               String         @db.VarChar(50)
  peso_tipo          pesoTipo
  peso_obs           String?        @db.VarChar(50)
  caloria            String         @db.VarChar(50)
  caloria_metodo     caloriaMetodo
  caloria_fdb        String?        @db.VarChar(50)
  caloria_outro      String?        @db.VarChar(50)
  proteina           String?        @db.VarChar(255)
  proteina_metodo    proteinaMetodo
  proteina_pratico   String?        @db.VarChar(50)
  proteina_vct       String?        @db.VarChar(50)
  hidrica            String         @db.VarChar(50)
  hidrica_observacao String?        @db.VarChar(50)
  criado_em          DateTime       @default(now()) @db.Timestamp
  atualizado_em      DateTime       @updatedAt @db.Timestamp

  id_ficha_nutricional BigInt           @unique @db.BigInt
  ficha_nutricional    FichaNutricional @relation(fields: [id_ficha_nutricional], references: [id])

  @@map("necessidade_nutricional")
}

model CondutaNutricional {
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  uid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data          DateTime @db.Date
  dieta         String   @db.VarChar(20)
  volume        String   @db.VarChar(20)
  fracionamento String   @db.VarChar(20)
  kcal_dia      String   @db.VarChar(20)
  ptn_dia       String   @db.VarChar(20)
  agua_ml       String   @db.VarChar(20)
  criado_em     DateTime @default(now()) @db.Timestamp
  atualizado_em DateTime @updatedAt @db.Timestamp

  id_ficha_nutricional BigInt           @unique @db.BigInt
  ficha_nutricional    FichaNutricional @relation(fields: [id_ficha_nutricional], references: [id])

  @@map("conduta_nutricional")
}

model QuadroClinico {
  id                  BigInt   @id @default(autoincrement()) @db.BigInt
  uid                 String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data                DateTime @db.Date
  aceitacao_alimentar String   @db.VarChar(20)
  suplemento_oral     String   @db.VarChar(20)
  apetite             String   @db.VarChar(20)
  disfagia            String   @db.VarChar(20)
  nausea_vomito       String   @db.VarChar(20)
  dor_abdominal       String   @db.VarChar(20)
  evacuacao           String   @db.VarChar(20)
  diurese             String   @db.VarChar(20)
  observacao          String   @db.VarChar(20)
  criado_em           DateTime @default(now()) @db.Timestamp
  atualizado_em       DateTime @updatedAt @db.Timestamp

  id_ficha_nutricional BigInt           @unique @db.BigInt
  ficha_nutricional    FichaNutricional @relation(fields: [id_ficha_nutricional], references: [id])

  @@map("quadro_clinico")
}

model Perroca {
  id                         BigInt   @id @default(autoincrement()) @db.BigInt
  uid                        String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  estado_metal_conciencia    Int      @db.Integer
  oxigenacao                 Int      @db.Integer
  sinais_vitais              Int      @db.Integer
  nutricao_hidratacao        Int      @db.Integer
  motilidade                 Int      @db.Integer
  locomocao                  Int      @db.Integer
  cuidado_corporal           Int      @db.Integer
  eliminacoes                Int      @db.Integer
  terapeutica                Int      @db.Integer
  educacao_saude             Int      @db.Integer
  comportamento              Int      @db.Integer
  comunicacao                Int      @db.Integer
  integridade_cutaneo_mucosa Int      @db.Integer
  tipo_cuidado_pontuacao     Int      @db.Integer
  tipo_cuidado_classificacao Int      @db.Integer
  criado_em                  DateTime @default(now()) @db.Timestamp
  atualizado_em              DateTime @updatedAt @db.Timestamp

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  @@map("perroca")
}

model EscalaBraden {
  id                   BigInt   @id @default(autoincrement()) @db.BigInt
  uid                  String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pontuacao_escala     String   @db.VarChar(255)
  percepcao_sensorial  String   @db.VarChar(255)
  umidade              String   @db.VarChar(255)
  atividade            String   @db.VarChar(255)
  mobilidade           String   @db.VarChar(255)
  nutricao             String   @db.VarChar(255)
  friccao_cisalhamento String   @db.VarChar(255)
  criado_em            DateTime @default(now()) @db.Timestamp
  atualizado_em        DateTime @updatedAt @db.Timestamp

  id_idoso BigInt @db.BigInt
  idoso    Idoso  @relation(fields: [id_idoso], references: [id])

  id_usuario BigInt  @db.BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])

  @@map("escala_braden")
}
